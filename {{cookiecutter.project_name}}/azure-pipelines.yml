# Grab variables from the specific variable group and
# determine sourceBranchName (avoids SourchBranchName=merge
# for PR)
variables:
  - group: 'Databricks-environment'

trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    exclude:
      - README.md
      - images
      - terraform
  tags:
    include:
      - v*.*
      - prod

# This need an additional debugging
# pr:
#   branches:
#     include:
#       - master
#       - releases
#   paths:
#     exclude:
#       - README.md
#       - images

stages:
- stage: onPush
  condition: |
    and(
      ne(variables['Build.SourceBranch'], 'refs/heads/releases'),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  jobs:
  - job: onPushJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        python -m pip install --upgrade pip nutter
        # this is because of the old dependency inside Nutter
        pip install -r unit-requirements.txt
        pip install -e .
        python -m pip install --upgrade databricks-cli
      displayName: 'Install dependencies'

# https://docs.databricks.com/dev-tools/api/latest/repos.html
# this is simplification, and won't work with concurrent commits. Ideally it should be a
# separate repo for each commit
    - script: |
        echo "Checking out the $(Build.SourceBranchName) branch"
        databricks repos update --path /Repos/Staging/{{cookiecutter.project_name}} --branch "$(Build.SourceBranchName)"
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Update Staging project'

    - script: |
        nutter run "/Repos/Staging/{{cookiecutter.project_name}}/unit-tests/" --cluster_id $(CLUSTER_ID) --recursive --junit_report --timeout 500
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
      displayName: 'Execute Nutter tests'

    - script: |
        dbx deploy --environment=staging --jobs={{cookiecutter.project_name}} --files-only
      displayName: 'Deploy the job'
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)

    - script: |
        dbx launch --environment=staging --job={{cookiecutter.project_name}} --as-run-submit --trace
      displayName: 'Launch job on staging'
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        failTaskOnFailedTests: true

- stage: onRelease
  condition: |
    or(
      startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    )
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip nutter
          # this is because of the old dependency inside Nutter
          pip install -r unit-requirements.txt
          pip install -e .
          python -m pip install --upgrade databricks-cli
        displayName: 'Install dependencies'

      - script: |
          echo "Checking out the releases branch"
          echo $(Build.SourceBranchName)
          databricks repos update --path /Repos/Production/{{cookiecutter.project_name}} --tag "$(Build.SourceBranchName)"
        env:
          DATABRICKS_HOST: $(DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
        displayName: 'Update Staging repository'

# We can do a separate set of the tests for release branches
      - script: |
          nutter run "/Repos/Staging/{{cookiecutter.project_name}}/unit-tests/" --cluster_id $(CLUSTER_ID) --recursive --junit_report --timeout 500
        env:
          DATABRICKS_HOST: $(DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)
        displayName: 'Execute Nutter tests on release'

      - script: |
          dbx deploy --job={{cookiecutter.project_name}} --environment=production
        displayName: 'Deploy job'
        env:
          DATABRICKS_HOST: $(DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(DATABRICKS_TOKEN)

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true